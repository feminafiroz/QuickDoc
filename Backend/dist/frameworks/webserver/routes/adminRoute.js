"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = require("express");
const adminController_1 = __importDefault(require("../../../adapters/adminController"));
const reviewController_1 = __importDefault(require("../../../adapters/reviewController"));
const AdminDbRepository_1 = __importDefault(require("../../../app/interfaces/AdminDbRepository"));
const departmentRepositoryInterface_1 = require("../../../app/interfaces/departmentRepositoryInterface");
const doctorDBRepository_1 = require("../../../app/interfaces/doctorDBRepository");
const reviewDbRepository_1 = require("../../../app/interfaces/reviewDbRepository");
const userDbRepository_1 = require("../../../app/interfaces/userDbRepository");
const authServiceInterface_1 = require("../../../app/service-interface/authServiceInterface");
const AdminRepositoryMongodb_1 = require("../../database/repositories/AdminRepositoryMongodb");
const departmentRepositoryMongodb_1 = require("../../database/repositories/departmentRepositoryMongodb");
const doctorRepositoryMongodb_1 = require("../../database/repositories/doctorRepositoryMongodb");
const reviewRepositoryMongodb_1 = require("../../database/repositories/reviewRepositoryMongodb");
const userRepositoryMongodb_1 = require("../../database/repositories/userRepositoryMongodb");
const authService_1 = require("../../services/authService");
const authMiddleware_1 = require("../middlewares/authMiddleware");
exports.default = () => {
    const router = (0, express_1.Router)();
    const controller = (0, adminController_1.default)(authServiceInterface_1.authServiceInterface, authService_1.authService, userDbRepository_1.userDbRepository, userRepositoryMongodb_1.userRepositoryMongodb, doctorDBRepository_1.doctorDbRepository, doctorRepositoryMongodb_1.doctorRepositoryMongodb, AdminDbRepository_1.default, AdminRepositoryMongodb_1.adminRepositoryMongodb, departmentRepositoryInterface_1.departmentDbRepository, departmentRepositoryMongodb_1.departmentRepositoryMongodb);
    const _reviewController = (0, reviewController_1.default)(reviewDbRepository_1.reviewDbRepository, reviewRepositoryMongodb_1.reviewRepositoryMongodb);
    router.post('/login', controller.adminLogin);
    router.get("/users", authMiddleware_1.authenticateAdmin, controller.getAllUser);
    router.patch("/block_user/:id", authMiddleware_1.authenticateAdmin, controller.userBlock);
    router.get("/doctors", authMiddleware_1.authenticateAdmin, controller.getAllDoctors);
    router.patch("/block_doctor/:id", authMiddleware_1.authenticateAdmin, controller.doctorBlock);
    router.get("/doctors/:id", authMiddleware_1.authenticateAdmin, controller.doctorDetails);
    router.patch("/update_doctor/:id", authMiddleware_1.authenticateAdmin, controller.updateDoctor);
    router.patch("/verify_doctor_rejection/:id", authMiddleware_1.authenticateAdmin, controller.rejectionDoctor);
    router.get("/appoinments", authMiddleware_1.authenticateAdmin, controller.getAllAppoinments);
    // departmentManagement--- 
    router.get('/department', authMiddleware_1.authenticateAdmin, controller.getAllDepartmentsHandler);
    router.post('/addDepartment', authMiddleware_1.authenticateAdmin, controller.addDepartmentHandler);
    router.get('/department/list', authMiddleware_1.authenticateAdmin, controller.listDepartmentsHandler);
    // router.get('/department/unList/:id',authenticateAdmin, controller.unlistDepartmentsHandler);
    router.put('/editDepartment/:id', authMiddleware_1.authenticateAdmin, controller.updateDepartmentHandler);
    router.patch('/block_department/:id', authMiddleware_1.authenticateAdmin, controller.blockDepartmentHandler);
    router.patch('/unblock_department/:id', authMiddleware_1.authenticateAdmin, controller.unblockDepartmentHandler);
    router.get("/banners", authMiddleware_1.authenticateAdmin, controller.getBanners);
    router.post("/banners/add", authMiddleware_1.authenticateAdmin, controller.addNewBanner);
    router.patch("/banners/edit/:bannerId", authMiddleware_1.authenticateAdmin, controller.updateBanner);
    router.delete("/banners/remove/:bannerId", authMiddleware_1.authenticateAdmin, controller.removBanner);
    router.get('/getallreviews', authMiddleware_1.authenticateAdmin, _reviewController.getAllTheReviewsHandler);
    router.delete("/reviews/remove/:reviewId", authMiddleware_1.authenticateAdmin, _reviewController.removeReviewHandler);
    return router;
};
